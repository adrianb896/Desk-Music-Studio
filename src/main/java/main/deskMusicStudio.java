package main;

import jaco.mp3.player.MP3Player;
import org.jfugue.player.Player;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.*;
import java.nio.file.Paths;

/**
 * @author adrian & christian 
 **/
// Piano, Guitar, Violin, Banjo
public class deskMusicStudio extends JFrame {

    // defining jar file class
    MP3Player user;
    // defining file for track
    File songFile;
    // defining current command line directories
    String currentDirectory = "home.user";
    // application class is created 
    String currentPath;
    // defining string variable for image name
    String imagePath;
    // defining string variable for application name 
    String applicationName = "Desk Music Studio";
    //defining jar file class
    Player player = new Player();

    
    JLayeredPane panel = new JLayeredPane();
    
    String noteV;
    // if statement is false, button interaction will not repeat
    boolean repeat = false;
    
    // boolean for windowCollasped
    boolean windowCollasped = false;
    
    // creating two integers for mouse x and y depending on position on display
    int xM, yM;
   
    
    public deskMusicStudio() {
        initComponents();
        
        instrumentButtons.add(guitarButton);
        instrumentButtons.add(pianoButton);
        instrumentButtons.add(violinButton);
        instrumentButtons.add(banjoButton);
        
        // declaring application title
        apptitle.setText(applicationName);
        
        // calling for song file
        songFile = new File("/Users/adrian/Downloads/ ");
        
        
        // declare string for file name
        String fileName = songFile.getName();
        songNameDisplay.setText(fileName);
        
        
        // playmusic method
        user = mp3Player();
        // loading song to track view
        user.addToPlayList(songFile);
        
        // current path in terms of strings
        currentPath = Paths.get(".").toAbsolutePath().normalize().toString();
        imagePath = "\\images";
        
        cKey.add(panel);
        dKey.add(panel);
        eKey.add(panel);
        fKey.add(panel);
        gKey.add(panel);
        aKey.add(panel);
        bKey.add(panel);
        highCKey.add(panel);
        cSharp.add(panel);
        dSharp.add(panel);
        fSharp.add(panel);
        gSharp.add(panel);
        aSharp.add(panel);
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     **/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new JScrollBar();
        instrumentButtons = new ButtonGroup();
        jPanel1 = new JPanel();
        headerPanel = new JPanel();
        apptitle = new JLabel();
        quitBtn = new JLabel();
        settingBtn = new JLabel();
        TrackViewName = new JLabel();
        songNameMainPanel = new JPanel();
        songNameSubPanel = new JPanel();
        songNameDisplay = new JLabel();
        controlPanel = new JPanel();
        loadBtn = new JLabel();
        saveBtn = new JLabel();
        jLabel1 = new JLabel();
        cKey = new JButton();
        dKey = new JButton();
        eKey = new JButton();
        fKey = new JButton();
        gKey = new JButton();
        aKey = new JButton();
        cSharp = new JButton();
        dSharp = new JButton();
        fSharp = new JButton();
        gSharp = new JButton();
        bKey = new JButton();
        highCKey = new JButton();
        aSharp = new JButton();
        noteBanjo = new JLabel();
        noteGuitar = new JLabel();
        notePiano = new JLabel();
        stopBtn = new JButton();
        repeatBtn = new JButton();
        pauseBtn = new JButton();
        playBtn = new JButton();
        muteBtn = new JButton();
        volumeDownBtn = new JButton();
        volumeUpBtn = new JButton();
        noteViolin = new JLabel();
        jScrollPane2 = new JScrollPane();
        GuitarText = new JTextArea();
        jScrollPane3 = new JScrollPane();
        PianoText = new JTextArea();
        jScrollPane4 = new JScrollPane();
        ViolinText = new JTextArea();
        jScrollPane5 = new JScrollPane();
        BanjoText = new JTextArea();
        guitarButton = new JRadioButton();
        pianoButton = new JRadioButton();
        violinButton = new JRadioButton();
        banjoButton = new JRadioButton();
        recordButton = new JToggleButton();
        playTextBtn = new JToggleButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new Dimension(1000, 492));

        jPanel1.setBackground(new java.awt.Color(80, 80, 80));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerPanel.setBackground(new java.awt.Color(80, 80, 80));
        headerPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        apptitle.setBackground(new java.awt.Color(102, 102, 102));
        apptitle.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        apptitle.setForeground(new java.awt.Color(102, 250, 250));
        apptitle.setText("   Desk Music Studio");
        apptitle.setBorder(BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font(".AppleSystemUIFont", 1, 13), new java.awt.Color(102, 102, 102))); // NOI18N
        apptitle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                apptitleMouseDragged(evt);
            }
        });
        apptitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apptitleMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                apptitleMousePressed(evt);
            }
        });

        quitBtn.setBackground(new java.awt.Color(102, 102, 102));
        quitBtn.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        quitBtn.setForeground(new java.awt.Color(102, 250, 250));
        quitBtn.setHorizontalAlignment(SwingConstants.CENTER);
        quitBtn.setText("Quit");
        quitBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        quitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitBtnMouseClicked(evt);
            }
        });

        settingBtn.setBackground(new java.awt.Color(102, 102, 102));
        settingBtn.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        settingBtn.setForeground(new java.awt.Color(102, 250, 250));
        settingBtn.setHorizontalAlignment(SwingConstants.CENTER);
        settingBtn.setText("Settings");
        settingBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        settingBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingBtnMouseClicked(evt);
            }
        });

        TrackViewName.setBackground(new java.awt.Color(102, 102, 102));
        TrackViewName.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        TrackViewName.setForeground(new java.awt.Color(102, 250, 250));
        TrackViewName.setHorizontalAlignment(SwingConstants.CENTER);
        TrackViewName.setText("Track View");
        TrackViewName.setBorder(BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N

        GroupLayout headerPanelLayout = new GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(apptitle, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                .addGap(687, 687, 687)
                .addComponent(TrackViewName, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 701, Short.MAX_VALUE)
                .addComponent(settingBtn, GroupLayout.PREFERRED_SIZE, 77, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitBtn, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(apptitle)
                        .addComponent(settingBtn, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitBtn, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addComponent(TrackViewName, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        apptitle.getAccessibleContext().setAccessibleName("Desk Music Studio");

        jPanel1.add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, -1));

        songNameMainPanel.setBackground(new java.awt.Color(50, 50, 50));

        songNameSubPanel.setBackground(new java.awt.Color(80, 80, 80));
        songNameSubPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        songNameDisplay.setBackground(new java.awt.Color(50, 50, 50));
        songNameDisplay.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        songNameDisplay.setForeground(new java.awt.Color(102, 250, 250));
        songNameDisplay.setText("Playing");
        songNameDisplay.setMaximumSize(new Dimension(50, 16));
        songNameDisplay.setMinimumSize(new Dimension(50, 16));

        GroupLayout songNameSubPanelLayout = new GroupLayout(songNameSubPanel);
        songNameSubPanel.setLayout(songNameSubPanelLayout);
        songNameSubPanelLayout.setHorizontalGroup(
            songNameSubPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(songNameSubPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(songNameDisplay, GroupLayout.PREFERRED_SIZE, 588, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1313, Short.MAX_VALUE))
        );
        songNameSubPanelLayout.setVerticalGroup(
            songNameSubPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(songNameDisplay, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
        );

        GroupLayout songNameMainPanelLayout = new GroupLayout(songNameMainPanel);
        songNameMainPanel.setLayout(songNameMainPanelLayout);
        songNameMainPanelLayout.setHorizontalGroup(
            songNameMainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 1920, Short.MAX_VALUE)
            .addGroup(songNameMainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(songNameMainPanelLayout.createSequentialGroup()
                    .addComponent(songNameSubPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        songNameMainPanelLayout.setVerticalGroup(
            songNameMainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(songNameMainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(songNameMainPanelLayout.createSequentialGroup()
                    .addComponent(songNameSubPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel1.add(songNameMainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 51, -1, -1));

        controlPanel.setBackground(new java.awt.Color(80, 80, 80));
        controlPanel.setBorder(BorderFactory.createEtchedBorder(new java.awt.Color(102, 250, 250), new java.awt.Color(102, 250, 250)));
        controlPanel.setPreferredSize(new Dimension(1920, 1040));

        loadBtn.setBackground(new java.awt.Color(102, 102, 102));
        loadBtn.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        loadBtn.setForeground(new java.awt.Color(102, 250, 250));
        loadBtn.setHorizontalAlignment(SwingConstants.CENTER);
        loadBtn.setText("Load");
        loadBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        loadBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadBtnMouseClicked(evt);
            }
        });

        saveBtn.setBackground(new java.awt.Color(102, 102, 102));
        saveBtn.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(102, 250, 250));
        saveBtn.setHorizontalAlignment(SwingConstants.CENTER);
        saveBtn.setText("Save");
        saveBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 255, 255));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Section View");
        jLabel1.setBorder(BorderFactory.createLineBorder(new java.awt.Color(102, 250, 250)));

        cKey.setBackground(new java.awt.Color(255, 255, 255));
        cKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        cKey.setText("C");
        cKey.setToolTipText("");
        cKey.setAutoscrolls(true);
        cKey.setVerticalAlignment(SwingConstants.TOP);
        cKey.setVerticalTextPosition(SwingConstants.TOP);
        cKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cKeyActionPerformed(evt);
            }
        });
        cKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                cKeyKeyPressed(evt);
            }
        });

        dKey.setBackground(new java.awt.Color(255, 255, 255));
        dKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        dKey.setText("D");
        dKey.setVerticalAlignment(SwingConstants.TOP);
        dKey.setVerticalTextPosition(SwingConstants.BOTTOM);
        dKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dKeyActionPerformed(evt);
            }
        });
        dKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                dKeyKeyPressed(evt);
            }
        });

        eKey.setBackground(new java.awt.Color(255, 255, 255));
        eKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        eKey.setText("E");
        eKey.setVerticalAlignment(SwingConstants.TOP);
        eKey.setVerticalTextPosition(SwingConstants.TOP);
        eKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eKeyActionPerformed(evt);
            }
        });
        eKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                eKeyKeyPressed(evt);
            }
        });

        fKey.setBackground(new java.awt.Color(255, 255, 255));
        fKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        fKey.setText("F");
        fKey.setVerticalAlignment(SwingConstants.TOP);
        fKey.setVerticalTextPosition(SwingConstants.TOP);
        fKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fKeyActionPerformed(evt);
            }
        });
        fKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                fKeyKeyPressed(evt);
            }
        });

        gKey.setBackground(new java.awt.Color(255, 255, 255));
        gKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        gKey.setText("G");
        gKey.setVerticalAlignment(SwingConstants.TOP);
        gKey.setVerticalTextPosition(SwingConstants.TOP);
        gKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gKeyActionPerformed(evt);
            }
        });
        gKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                gKeyKeyPressed(evt);
            }
        });

        aKey.setBackground(new java.awt.Color(255, 255, 255));
        aKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        aKey.setText("A");
        aKey.setVerticalAlignment(SwingConstants.TOP);
        aKey.setVerticalTextPosition(SwingConstants.TOP);
        aKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aKeyActionPerformed(evt);
            }
        });
        aKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                aKeyKeyPressed(evt);
            }
        });

        cSharp.setBackground(new java.awt.Color(0, 0, 0));
        cSharp.setForeground(new java.awt.Color(255, 255, 255));
        cSharp.setText("C#");
        cSharp.setVerticalAlignment(SwingConstants.TOP);
        cSharp.setVerticalTextPosition(SwingConstants.TOP);
        cSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSharpActionPerformed(evt);
            }
        });
        cSharp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                cSharpKeyPressed(evt);
            }
        });

        dSharp.setBackground(new java.awt.Color(0, 0, 0));
        dSharp.setForeground(new java.awt.Color(255, 255, 255));
        dSharp.setText("D#");
        dSharp.setVerticalAlignment(SwingConstants.TOP);
        dSharp.setVerticalTextPosition(SwingConstants.TOP);
        dSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dSharpActionPerformed(evt);
            }
        });
        dSharp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                dSharpKeyPressed(evt);
            }
        });

        fSharp.setBackground(new java.awt.Color(0, 0, 0));
        fSharp.setForeground(new java.awt.Color(255, 255, 255));
        fSharp.setText("F#");
        fSharp.setVerticalAlignment(SwingConstants.TOP);
        fSharp.setVerticalTextPosition(SwingConstants.TOP);
        fSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fSharpActionPerformed(evt);
            }
        });
        fSharp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                fSharpKeyPressed(evt);
            }
        });

        gSharp.setBackground(new java.awt.Color(0, 0, 0));
        gSharp.setForeground(new java.awt.Color(255, 255, 255));
        gSharp.setText("G#");
        gSharp.setVerticalAlignment(SwingConstants.TOP);
        gSharp.setVerticalTextPosition(SwingConstants.TOP);
        gSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gSharpActionPerformed(evt);
            }
        });
        gSharp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                gSharpKeyPressed(evt);
            }
        });

        bKey.setBackground(new java.awt.Color(255, 255, 255));
        bKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        bKey.setText("B");
        bKey.setVerticalAlignment(SwingConstants.TOP);
        bKey.setVerticalTextPosition(SwingConstants.TOP);
        bKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bKeyActionPerformed(evt);
            }
        });
        bKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                bKeyKeyPressed(evt);
            }
        });

        highCKey.setBackground(new java.awt.Color(255, 255, 255));
        highCKey.setFont(new Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        highCKey.setText("C6");
        highCKey.setVerticalAlignment(SwingConstants.TOP);
        highCKey.setVerticalTextPosition(SwingConstants.TOP);
        highCKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highCKeyActionPerformed(evt);
            }
        });
        highCKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                highCKeyKeyPressed(evt);
            }
        });

        aSharp.setBackground(new java.awt.Color(0, 0, 0));
        aSharp.setForeground(new java.awt.Color(255, 255, 255));
        aSharp.setText("A#");
        aSharp.setVerticalAlignment(SwingConstants.TOP);
        aSharp.setVerticalTextPosition(SwingConstants.TOP);
        aSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aSharpActionPerformed(evt);
            }
        });
        aSharp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                aSharpKeyPressed(evt);
            }
        });

        stopBtn.setBackground(new java.awt.Color(102, 102, 102));
        stopBtn.setForeground(new java.awt.Color(102, 255, 255));
        stopBtn.setText("restart");
        stopBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopBtnMouseClicked(evt);
            }
        });

        repeatBtn.setBackground(new java.awt.Color(102, 102, 102));
        repeatBtn.setForeground(new java.awt.Color(102, 255, 255));
        repeatBtn.setText("loop");
        repeatBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repeatBtnMouseClicked(evt);
            }
        });

        pauseBtn.setBackground(new java.awt.Color(102, 102, 102));
        pauseBtn.setForeground(new java.awt.Color(102, 255, 255));
        pauseBtn.setText("pause");
        pauseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseBtnMouseClicked(evt);
            }
        });

        playBtn.setBackground(new java.awt.Color(102, 102, 102));
        playBtn.setForeground(new java.awt.Color(102, 255, 255));
        playBtn.setText("Play MP3");
        playBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playBtnMouseClicked(evt);
            }
        });
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });

        muteBtn.setBackground(new java.awt.Color(102, 102, 102));
        muteBtn.setForeground(new java.awt.Color(102, 255, 255));
        muteBtn.setText("mute");
        muteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                muteBtnMouseClicked(evt);
            }
        });

        volumeDownBtn.setBackground(new java.awt.Color(102, 102, 102));
        volumeDownBtn.setForeground(new java.awt.Color(102, 255, 255));
        volumeDownBtn.setText("volume down");
        volumeDownBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumeDownBtnMouseClicked(evt);
            }
        });

        volumeUpBtn.setBackground(new java.awt.Color(102, 102, 102));
        volumeUpBtn.setForeground(new java.awt.Color(102, 255, 255));
        volumeUpBtn.setText("volume up");
        volumeUpBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumeUpBtnMouseClicked(evt);
            }
        });

        GuitarText.setColumns(20);
        GuitarText.setRows(5);
        jScrollPane2.setViewportView(GuitarText);

        PianoText.setColumns(20);
        PianoText.setRows(5);
        jScrollPane3.setViewportView(PianoText);

        ViolinText.setColumns(20);
        ViolinText.setRows(5);
        jScrollPane4.setViewportView(ViolinText);

        BanjoText.setColumns(20);
        BanjoText.setRows(5);
        jScrollPane5.setViewportView(BanjoText);

        guitarButton.setIcon(new ImageIcon("C:\\Programming Projects\\Images\\Guitar.png")); // NOI18N
        guitarButton.setLabel("guitarButton");
        guitarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guitarButtonActionPerformed(evt);
            }
        });

        pianoButton.setText("pianoButton");
        pianoButton.setIcon(new ImageIcon("C:\\Programming Projects\\Images\\Piano.png")); // NOI18N

        violinButton.setText("viloinButton");
        violinButton.setActionCommand("violinButton");
        violinButton.setIcon(new ImageIcon("C:\\Programming Projects\\Images\\Violin.png")); // NOI18N

        banjoButton.setText("banjoButton");
        banjoButton.setIcon(new ImageIcon("C:\\Programming Projects\\Images\\Banjo.png")); // NOI18N

        recordButton.setText("Record");

        playTextBtn.setForeground(new java.awt.Color(102, 255, 255));
        playTextBtn.setText("play");
        playTextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playTextBtnActionPerformed(evt);
            }
        });

        GroupLayout controlPanelLayout = new GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(playBtn)
                .addGap(423, 423, 423)
                .addComponent(stopBtn)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeatBtn)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseBtn)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playTextBtn, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(recordButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(muteBtn)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeDownBtn)
                .addGap(312, 312, 312)
                .addComponent(volumeUpBtn)
                .addGap(185, 185, 185))
            .addGroup(GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.LEADING, controlPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(notePiano, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(1057, 1057, 1057))
                            .addComponent(noteViolin, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(banjoButton, GroupLayout.PREFERRED_SIZE, 184, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane5, GroupLayout.PREFERRED_SIZE, 1561, GroupLayout.PREFERRED_SIZE)
                                .addGap(265, 265, 265)
                                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(controlPanelLayout.createSequentialGroup()
                                        .addGap(109, 109, 109)
                                        .addComponent(noteGuitar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(noteBanjo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.LEADING, controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(GroupLayout.Alignment.LEADING, controlPanelLayout.createSequentialGroup()
                                .addComponent(cKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cSharp, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dSharp, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(eKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fSharp, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(gKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gSharp, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(aKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aSharp, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bKey, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highCKey, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.LEADING, controlPanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(controlPanelLayout.createSequentialGroup()
                                            .addComponent(saveBtn, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(loadBtn, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.LEADING, controlPanelLayout.createSequentialGroup()
                                            .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(pianoButton, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addComponent(guitarButton, GroupLayout.PREFERRED_SIZE, 184, GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 1561, GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 1561, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(controlPanelLayout.createSequentialGroup()
                                            .addComponent(violinButton, GroupLayout.PREFERRED_SIZE, 184, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 1561, GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(loadBtn))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(guitarButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(noteBanjo, GroupLayout.PREFERRED_SIZE, 9, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noteGuitar, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(pianoButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addComponent(violinButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5)
                            .addComponent(banjoButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noteViolin, GroupLayout.PREFERRED_SIZE, 9, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(notePiano, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(stopBtn)
                    .addComponent(repeatBtn)
                    .addComponent(pauseBtn)
                    .addComponent(playBtn)
                    .addComponent(muteBtn)
                    .addComponent(volumeDownBtn)
                    .addComponent(volumeUpBtn)
                    .addComponent(recordButton)
                    .addComponent(playTextBtn))
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(aKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                                .addComponent(cSharp, GroupLayout.DEFAULT_SIZE, 1030, Short.MAX_VALUE)
                                .addComponent(dSharp, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fSharp, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(highCKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE))
                            .addComponent(cKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                            .addComponent(dKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                            .addComponent(eKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                            .addComponent(fKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                            .addComponent(gKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                            .addComponent(gSharp, GroupLayout.PREFERRED_SIZE, 694, GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(aSharp, GroupLayout.DEFAULT_SIZE, 1030, Short.MAX_VALUE)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(bKey, GroupLayout.PREFERRED_SIZE, 360, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        jPanel1.add(controlPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1920, 1050));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
     private String checkInstrument() {
         if (guitarButton.isSelected() == true)
             return "Guitar";
         else if (violinButton.isSelected() == true)
             return "Violin";
         else if (banjoButton.isSelected() == true)
             return "Banjo";
         else
             return "Piano";
               
     }
            
    private void apptitleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMousePressed
        // TODO add your handling code here:
        xM = evt.getX();
        yM = evt.getY();
    }//GEN-LAST:event_apptitleMousePressed

    private void apptitleMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xM, y - yM);
    }//GEN-LAST:event_apptitleMouseDragged

    private void quitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitBtnMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_quitBtnMouseClicked

    private void settingBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingBtnMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Settings dialog will display here");
    }//GEN-LAST:event_settingBtnMouseClicked

    private void apptitleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            if (windowCollasped == false) {
                windowCollasped = true;
                this.setSize(new Dimension(this.getSize().width, 50));
                
                apptitle.setFont(new Font(".AppleSystemUIFont", 0, 12));
                apptitle.setText("Playing...  " + songFile.getName());
            } else if (windowCollasped == true) {
                windowCollasped = false;
                this.setSize(new Dimension(this.getSize().width, 250));
                
                apptitle.setFont(new Font(".AppleSystemUIFont", 0, 10));
                apptitle.setText(applicationName);
            }
        }
    }//GEN-LAST:event_apptitleMouseClicked

    private void volumeUpBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeUpBtnMouseClicked
        // TODO add your handling code here:
        volumeupControl(0.1);
    }//GEN-LAST:event_volumeUpBtnMouseClicked

    private void volumeDownBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeDownBtnMouseClicked
        // TODO add your handling code here:
        volumedownControl(0.1);
    }//GEN-LAST:event_volumeDownBtnMouseClicked

    private void muteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_muteBtnMouseClicked
        // TODO add your handling code here:
        volumeControl(0.0);
    }//GEN-LAST:event_muteBtnMouseClicked

    private void playBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playBtnMouseClicked
        // TODO add your handling code here:
        user.play();
    }//GEN-LAST:event_playBtnMouseClicked

    private void pauseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseBtnMouseClicked
        // TODO add your handling code here:
        user.pause();
    }//GEN-LAST:event_pauseBtnMouseClicked

    private void repeatBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repeatBtnMouseClicked
        // TODO add your handling code here:
        if (repeat == false) {
            repeat = true;
            user.setRepeat(repeat);

            String image = currentPath + imagePath;
            repeatBtn.setIcon(new ImageIcon(image));
        }
        else if (repeat == true) {
            repeat = false;
            user.setRepeat(repeat);

            String image = currentPath + imagePath;
            repeatBtn.setIcon(new ImageIcon(image));
        }
    }//GEN-LAST:event_repeatBtnMouseClicked

    private void stopBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopBtnMouseClicked
        // TODO add your handling code here:
        user.stop();
    }//GEN-LAST:event_stopBtnMouseClicked

    private void aSharpKeyPressed(KeyEvent evt) {//GEN-FIRST:event_aSharpKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_5) {
            if(evt.getSource()==aSharp) {
               // player.play("A#");
            }
        }
    }//GEN-LAST:event_aSharpKeyPressed

    private void aSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aSharpActionPerformed
        // TODO add your handling code here:
        String note = "A# ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== aSharp) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "A#h");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "A#h");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "A#h");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "A#h");            
                }      
            else
                player.play("I[" + instrument + "] " + "A#h");
        }
    }//GEN-LAST:event_aSharpActionPerformed

    private void highCKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_highCKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_6) {
            if(evt.getSource()==highCKey) {
                player.play("C6");
            }
        }
    }//GEN-LAST:event_highCKeyKeyPressed

    private void highCKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highCKeyActionPerformed
        // TODO add your handling code here:
      String note = "C6 ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== highCKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "C6h");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "C6h");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "C6h");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "C6h");            
                }      
            else
                player.play("I[" + instrument + "] " + "C6h");
        }
    }//GEN-LAST:event_highCKeyActionPerformed

    private void bKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_bKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_B) {
            if(evt.getSource()==bKey) {
                player.play("B");
            }
        }
    }//GEN-LAST:event_bKeyKeyPressed

    private void bKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bKeyActionPerformed
        // TODO add your handling code here:
       String note = "B ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== bKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Bh");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Bh");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Bh");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Bh");            
                }      
            else
                player.play("I[" + instrument + "] " + "Bh");
        }
    }//GEN-LAST:event_bKeyActionPerformed

    private void gSharpKeyPressed(KeyEvent evt) {//GEN-FIRST:event_gSharpKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_3) {
            if(evt.getSource()==gSharp) {
                player.play("G#");
            }
        }
    }//GEN-LAST:event_gSharpKeyPressed

    private void gSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gSharpActionPerformed
   String note = "G# ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== gSharp) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "G#h");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "G#h");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "G#h");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "G#h");            
                }      
            else
                player.play("I[" + instrument + "] " + "G#h");
        }
    }//GEN-LAST:event_gSharpActionPerformed

    private void fSharpKeyPressed(KeyEvent evt) {//GEN-FIRST:event_fSharpKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_3) {
            if(evt.getSource()==fSharp) {
                player.play("F#");
            }
        }
    }//GEN-LAST:event_fSharpKeyPressed

    private void fSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fSharpActionPerformed
        // TODO add your handling code here:
       String note = "F# ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== fSharp) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "F#h");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "F#h");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "F#h");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "F#h");            
                }      
            else
                player.play("I[" + instrument + "] " + "F#");
        }
    }//GEN-LAST:event_fSharpActionPerformed

    private void dSharpKeyPressed(KeyEvent evt) {//GEN-FIRST:event_dSharpKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_2) {
            if(evt.getSource()==dSharp) {
                player.play("D#");
            }
        }
    }//GEN-LAST:event_dSharpKeyPressed

    private void dSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dSharpActionPerformed
        // TODO add your handling code here:
         String note = "D# ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== dSharp) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "D#h");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "D#h");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "D#h");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "D#h");            
                }      
            else
                player.play("I[" + instrument + "] " + "D#h");
        }
    }//GEN-LAST:event_dSharpActionPerformed

    private void cSharpKeyPressed(KeyEvent evt) {//GEN-FIRST:event_cSharpKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_1) {
            if(evt.getSource()==cSharp)
            player.play("C#");
        }
    }//GEN-LAST:event_cSharpKeyPressed

    private void cSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSharpActionPerformed
        // TODO add your handling code here:
     String note = "C# ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== cSharp) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "C#h");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "C#h");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "C#h");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "C#h");            
                }      
            else
                player.play("I[" + instrument + "] " + "C#h");
        }
    }//GEN-LAST:event_cSharpActionPerformed

    private void aKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_aKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_A) {
            if(evt.getSource()==aKey) {
                player.play("A");
            }
        }
    }//GEN-LAST:event_aKeyKeyPressed

    private void aKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aKeyActionPerformed
        String note = "A ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== aKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Ah");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Ah");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Ah");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Ah");            
                }      
            else
                player.play("I[" + instrument + "] " + "Ah");
        }
    }//GEN-LAST:event_aKeyActionPerformed

    private void gKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_gKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_G) {
            if(evt.getSource()==gKey) {
                player.play("G");
            }
        }
    }//GEN-LAST:event_gKeyKeyPressed

    private void gKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gKeyActionPerformed
         String note = "G ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== gKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Gh");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Gh");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Gh");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Gh");            
                }      
            else
                player.play("I[" + instrument + "] " + "Gh");
        }
    }//GEN-LAST:event_gKeyActionPerformed

    private void fKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_fKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_F) {
            if(evt.getSource()==fKey) {
                player.play("F");
            }
        }
    }//GEN-LAST:event_fKeyKeyPressed

    private void fKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fKeyActionPerformed
        String note = "F ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== fKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Fh");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Fh");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Fh");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Fh");            
                }      
            else
                player.play("I[" + instrument + "] " + "Fh");
        }
    }//GEN-LAST:event_fKeyActionPerformed

    private void eKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_eKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_E) {
            if(evt.getSource()==eKey) {
                player.play("E");
            }
        }
    }//GEN-LAST:event_eKeyKeyPressed

    private void eKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eKeyActionPerformed
        String note = "E ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== eKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Eh");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Eh");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Eh");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Eh");            
                }      
            else
                player.play("I[" + instrument + "] " + "Eh");
        }
    }//GEN-LAST:event_eKeyActionPerformed

    private void dKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_dKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_D) {
            if(evt.getSource()==dKey)
            player.play("Dh");
        }
    }//GEN-LAST:event_dKeyKeyPressed

    private void dKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dKeyActionPerformed
       String note = "D ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== dKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Dh");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Dh");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Dh");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Dh");            
                }      
            else
                player.play("I[" + instrument + "] " + "Dh");
        }
    }//GEN-LAST:event_dKeyActionPerformed
    private void cKeyActionPerformed(java.awt.event.ActionEvent evt) {                                     
        String note = "C ";
        String instrument = checkInstrument();  
        boolean record = recordButton.isSelected();
        
        if(evt.getSource()== cKey) {
            
            if(record == true && pianoButton.isSelected ()== true)
                {               
                    PianoText.append(note); 
                    player.play("I[" + instrument + "] " + "Ch");            
                }
            else if (record == true && guitarButton.isSelected ()== true)
                {               
                    GuitarText.append(note); 
                    player.play("I[" + instrument + "] " + "Ch");            
                }
            else if (record == true && violinButton.isSelected ()== true)
                {               
                    ViolinText.append(note); 
                    player.play("I[" + instrument + "] " + "Ch");            
                }
            else if (record == true && banjoButton.isSelected ()== true)
                {               
                    BanjoText.append(note); 
                    player.play("I[" + instrument + "] " + "Ch");            
                }      
            else
                player.play("I[" + instrument + "] " + "Ch");
        }
    }
        
    private void cKeyKeyPressed(KeyEvent evt) {//GEN-FIRST:event_cKeyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_C) {
            if(evt.getSource()==cKey)
            player.play("Ch");
        }
    }//GEN-LAST:event_cKeyKeyPressed

//GEN-FIRST:event_cKeyActionPerformed
 
//GEN-LAST:event_cKeyActionPerformed

    private void saveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseClicked
        // TODO add your handling code here:
        // JFileChooser to browse File or save File
        
       String piano = PianoText.getText();
       String guitar = GuitarText.getText();
       String violin = ViolinText.getText();
       String banjo = BanjoText.getText();
       
        JFileChooser saveFile = new JFileChooser("home.user");
        // set JFileChooser Title
        saveFile.setDialogTitle("Save file: PLEASE MANUALLY WRITE FILE TYPE AT END OF FILE NAME");
        // set JFileChooser Filter From our newly created class
        saveFile.setFileFilter(new fileFilter(".mp3", "MP3 File Only"));
        // set JFileChooser Filter From our newly created class
        saveFile.setFileFilter(new fileFilter(" .txt", "Text File Only"));
        // store result in to INT
        int result = saveFile.showSaveDialog(null);
        // check if result returns APPROVED
        if (result == JFileChooser.APPROVE_OPTION) {
            // store text content into strin
            // get selected file
            File fileToSave;
            fileToSave = saveFile.getSelectedFile();
            // Now use exception to store File
            try{
                // write file writer to write that text into file
                FileWriter fileWriter = new FileWriter(fileToSave.getPath());
                // now flush the cache file
                fileWriter.write(guitar + "\n");
                fileWriter.write(piano + "\n");
                fileWriter.write(violin + "\n");
                fileWriter.write(banjo + "\n");
                
                fileWriter.flush();
                // and close FileWriter
                fileWriter.close();
            }catch (Exception exception) {
                JOptionPane.showMessageDialog(this, "File Error: " + exception.getMessage());
            }
        }
    }//GEN-LAST:event_saveBtnMouseClicked

    private void loadBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadBtnMouseClicked
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser(currentDirectory);
        loadFile.setDialogTitle("Load");
        // set JFileChooser Filter From our newly created class
        loadFile.setFileFilter(new fileFilter(".mp3", "MP3 file type"));
        // set JFileChooser Filter From our newly created class
        loadFile.setFileFilter(new fileFilter(".txt", "Text file type"));
        int result = loadFile.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            songFile = loadFile.getSelectedFile();
           
            //String fileType = songFile.getName();
            //int start = fileType.length() - 5;
            //int end = fileType.length()-1;
            
            
            user.addToPlayList(songFile);
            user.skipForward();
            currentDirectory = songFile.getAbsolutePath();
            songNameDisplay.setText("Playing ... " + songFile.getName());
            File selectedTextFile = loadFile.getSelectedFile();
            // read the selected file
            try{
          
                BufferedReader br = new BufferedReader(new FileReader(selectedTextFile));
                
                String st = br.readLine();
                GuitarText.append(st);
                
                st = br.readLine();
                PianoText.append(st);
                
                st = br.readLine();
                ViolinText.append(st);
                
                st = br.readLine();
                BanjoText.append(st);
       
                
            }catch (IOException exception) {
                JOptionPane.showMessageDialog(this, "File Open Error: " + exception.getMessage());
            }
        }
    }//GEN-LAST:event_loadBtnMouseClicked

    private void guitarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guitarButtonActionPerformed
       
    }//GEN-LAST:event_guitarButtonActionPerformed

    private void playTextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playTextBtnActionPerformed
        
        String instrument = checkInstrument();
        
        if(pianoButton.isSelected() == true)
                {
                    String notes = PianoText.getText();
                    player.play("I[" + instrument + "] " + notes);
                }
            else if (guitarButton.isSelected() == true)
                {               
                    String notes = GuitarText.getText();
                    player.play("I[" + instrument + "] " + notes);
                }
            else if (violinButton.isSelected() == true)
                {               
                    String notes = ViolinText.getText();
                    player.play("I[" + instrument + "] " + notes);          
                }
            else if (banjoButton.isSelected() == true)
                {               
                    String notes = BanjoText.getText();
                    player.play("I[" + instrument + "] " + notes);            
                }      
            else
            {
                //do nothing
            }
                
    }//GEN-LAST:event_playTextBtnActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playBtnActionPerformed

  
       
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set the Nimbus look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deskMusicStudio().setVisible(true);
            }
        });     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextArea BanjoText;
    private JTextArea GuitarText;
    private JTextArea PianoText;
    private JLabel TrackViewName;
    private JTextArea ViolinText;
    private JButton aKey;
    private JButton aSharp;
    private JLabel apptitle;
    private JButton bKey;
    private JRadioButton banjoButton;
    private JButton cKey;
    private JButton cSharp;
    private JPanel controlPanel;
    private JButton dKey;
    private JButton dSharp;
    private JButton eKey;
    private JButton fKey;
    private JButton fSharp;
    private JButton gKey;
    private JButton gSharp;
    private JRadioButton guitarButton;
    private JPanel headerPanel;
    private JButton highCKey;
    private ButtonGroup instrumentButtons;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JScrollBar jScrollBar1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane4;
    private JScrollPane jScrollPane5;
    private JLabel loadBtn;
    private JButton muteBtn;
    private JLabel noteBanjo;
    private JLabel noteGuitar;
    private JLabel notePiano;
    private JLabel noteViolin;
    private JButton pauseBtn;
    private JRadioButton pianoButton;
    private JButton playBtn;
    private JToggleButton playTextBtn;
    private JLabel quitBtn;
    private JToggleButton recordButton;
    private JButton repeatBtn;
    private JLabel saveBtn;
    private JLabel settingBtn;
    private JLabel songNameDisplay;
    private JPanel songNameMainPanel;
    private JPanel songNameSubPanel;
    private JButton stopBtn;
    private JRadioButton violinButton;
    private JButton volumeDownBtn;
    private JButton volumeUpBtn;
    // End of variables declaration//GEN-END:variables

    // custom private declaration for mp3 method
    private MP3Player mp3Player() {
        MP3Player mp3Player = new MP3Player();
        return mp3Player;
    }
    
    // custom private declaration for lowering volume
    private void volumedownControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((float)currentVolume - (double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
            }
        }
    }
    // custom private declaration for increasing volume
    private void volumeupControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((float)currentVolume + (double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
    // custom private declaration volume in general
    public void volumeControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
}
